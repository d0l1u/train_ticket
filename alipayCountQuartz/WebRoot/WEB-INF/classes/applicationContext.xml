<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"> 
     
    <context:annotation-config/>  
  	<context:property-placeholder
        location="classpath:quartz-corn-expression.properties,classpath:jdbc.properties,classpath:redis.properties" />
    <util:properties id="config" location="classpath:config.properties" /> 
    <!--JDBC Transaction  Manage -->  
    <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">  
        <constructor-arg>  
            <ref bean="dataSource" />  
        </constructor-arg>  
    </bean>  
  
    <!-- The JDBC c3p0 dataSource bean-->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
        <property name="driverClass" value="${jdbc.driverClass}" />  
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}" />  
        <property name="user" value="${jdbc.user}" />  
        <property name="password" value="${jdbc.password}" />  
    </bean>  
  	
  	
  	<!-- 属性文件配置 
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"  />  -->
	
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
		<property name="maxIdle" value="${redis.maxIdle}" />  
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />  
	</bean>  
	  
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
		p:host-name="${redis.host}" 
		p:port="${redis.port}" 
		p:password="${redis.pass}"  
		p:pool-config-ref="poolConfig" />  
	  
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
		<property name="connectionFactory"   ref="connectionFactory" />  
	</bean>	  


	<!-- cache redis -->
	<!--  
	<bean id="cachePoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
		<property name="maxIdle" value="${redis.cache.maxIdle}" />  
		<property name="testOnBorrow" value="${redis.cache.testOnBorrow}" />  
	</bean>  
	  
	<bean id="cacheConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
		p:host-name="${redis.cache.host}" 
		p:port="${redis.cache.port}" 
		p:password="${redis.cache.pass}"  
		p:pool-config-ref="cachePoolConfig"/>  
	  
	<bean id="cacheRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
		<property name="connectionFactory"   ref="cacheConnectionFactory" />
		-->
		<!-- 11222
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		 -->
	<!--  
	</bean>
  	-->
  	
  	
  	
  	
  	
   
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <!-- mybatis.spring自动映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="sqlSessionFactory"  ref="sqlSessionFactory"/>  
        <property name="basePackage" value="com.nineteen.mapper"></property>  
    </bean>
     <!-- 自动扫描，多个包以 逗号分隔 -->
    <context:component-scan base-package="com.nineteen.service.*,com.nineteen.mapper"/>
    <aop:aspectj-autoproxy/>
</beans> 